{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        email: \"\",\n        password: \"\"\n      }\n    };\n  },\n  validations: {\n    form: {\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(6)\n      }\n    }\n  },\n  methods: {\n    login() {\n      this.$v.$touch();\n      if (this.$v.$error) {\n        return;\n      }\n    },\n    register() {},\n    getValidation(field) {\n      if (this.$v.form.$dirty === false) {\n        return null;\n      }\n      return !this.$v.form[field].$error;\n    }\n  }\n};","map":{"version":3,"names":["data","form","email","password","validations","required","minLength","methods","login","$v","$touch","$error","register","getValidation","field","$dirty"],"sources":["C:\\Users\\naldo\\OneDrive\\Documents\\GitHub\\appbarber\\barbervue\\src\\views\\TelaLogin.vue"],"sourcesContent":["<template>\n  <b-row class=\"vh-100 vw-100 row-login\">\n    <b-col sm=\"5\" class=\"d-flex justify-content-center align-items-center left-login\">\n      <div class=\"col-8\">\n        <h2 class=\"text-center mb-5 title-login\">Faça o login</h2>\n\n        <b-form>\n          <b-form-group\n            label=\"E-mail\"\n            label-for=\"email\"\n            >\n              <b-form-input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"joaosilva@email.com\"\n                autocomplete=\"off\"\n                v-model.trim=\"$v.form.email.$model\"\n                :state=\"getValidation('email')\"\n              ></b-form-input>\n            </b-form-group>\n\n            <b-form-group\n              label-for=\"password\"\n            >\n              <label class=\"d-flex justify-content-between\">\n                Senha\n                <small><a href=\"#\">Esqueceu sua senha?</a></small>\n              </label>\n\n              <b-form-input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Digite sua senha\"\n                v-model.trim=\"$v.form.password.$model\"\n                :state=\"getValidation('password')\"\n              ></b-form-input>\n            </b-form-group>\n\n            <b-button\n              type=\"button\"\n              variant=\"primary\"\n              block\n              @click=\"login\">\n              <i class=\"fas fa-sign-in-alt\"></i> Entrar\n            </b-button>\n\n            <hr>\n\n            <b-button\n              type=\"button\"\n              variant=\"outline-secondary\"\n              block\n              @click=\"register\">\n              <i class=\"fas fa-user-plus\"></i> Não tenho conta\n            </b-button>\n        </b-form>\n      </div>\n    </b-col>\n    <b-col sm=\"7\" class=\"d-flex justify-content-center align-items-center\">\n      <img src=\"\" class=\"\" />\n    </b-col>\n  </b-row>\n</template>\n\n<script>\n\n\nexport default {\n  data() {\n    return {\n      form: {\n        email: \"\",\n        password: \"\"\n      }\n    }\n  },\n\n  validations: {\n    form: {\n      email: {\n        required,\n        email\n      },\n\n      password: {\n        required,\n        minLength: minLength(6)\n      },\n    }\n  },\n\n  methods: {\n    login() {\n      this.$v.$touch();\n      if(this.$v.$error) {\n        return;\n      }\n    },\n\n    register() {},\n\n    getValidation(field) {\n      if(this.$v.form.$dirty === false) {\n        return null;\n      }\n\n      return !this.$v.form[field].$error;\n    }\n  }\n}\n</script>\n\n<style>\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  text-decoration: none;\n}\n\n.row-login {\n  margin-left: 0;\n}\n\n.left-login {\n  background-color: #F2F2F2;\n}\n\n.title-login {\n  font-weight: bold;\n}\n\n.img-login {\n  width: 600px;\n  height: 600px;\n}\n\n</style>\n"],"mappings":"AAmEA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ;IACF;EACF,CAAC;EAEDC,WAAW,EAAE;IACXH,IAAI,EAAE;MACJC,KAAK,EAAE;QACLG,QAAQ;QACRH;MACF,CAAC;MAEDC,QAAQ,EAAE;QACRE,QAAQ;QACRC,SAAS,EAAEA,SAAS,CAAC,CAAC;MACxB;IACF;EACF,CAAC;EAEDC,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACN,IAAI,CAACC,EAAE,CAACC,MAAM,EAAE;MAChB,IAAG,IAAI,CAACD,EAAE,CAACE,MAAM,EAAE;QACjB;MACF;IACF,CAAC;IAEDC,QAAQA,CAAA,EAAG,CAAC,CAAC;IAEbC,aAAaA,CAACC,KAAK,EAAE;MACnB,IAAG,IAAI,CAACL,EAAE,CAACR,IAAI,CAACc,MAAK,KAAM,KAAK,EAAE;QAChC,OAAO,IAAI;MACb;MAEA,OAAO,CAAC,IAAI,CAACN,EAAE,CAACR,IAAI,CAACa,KAAK,CAAC,CAACH,MAAM;IACpC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}