{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, _toDisplayString(_ctx.prefix) + _toDisplayString(_ctx.newValueFormatted) + _toDisplayString(_ctx.suffix), 1 /* TEXT */);\n}","map":{"version":3,"names":["_createElementBlock","_toDisplayString","_ctx","prefix","newValueFormatted","suffix"],"sources":["C:\\Users\\naldo\\OneDrive\\Documents\\GitHub\\appbarber\\barbervue\\src\\components\\GrowingNumber.vue"],"sourcesContent":["<template>\n  <div>{{ prefix }}{{ newValueFormatted }}{{ suffix }}</div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport numeral from 'numeral'\n\nexport default defineComponent({\n  name: 'GrowingNumber',\n  props: {\n    prefix: {\n      type: String,\n      default: null\n    },\n    suffix: {\n      type: String,\n      default: null\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    duration: {\n      type: Number,\n      default: 500\n    }\n  },\n  data () {\n    return {\n      newValue: 0\n    }\n  },\n  computed: {\n    newValueFormatted () {\n      return this.newValue < 1000 ? this.newValue : numeral(this.newValue).format('0,0')\n    }\n  },\n  watch: {\n    value () {\n      this.growInit()\n    }\n  },\n  mounted () {\n    this.growInit()\n  },\n  methods: {\n    grow (m) {\n      const v = Math.ceil(this.newValue + m)\n\n      if (v > this.value) {\n        this.newValue = this.value\n        return false\n      }\n\n      this.newValue = v\n\n      setTimeout(() => {\n        this.grow(m)\n      }, 25)\n    },\n    growInit () {\n      this.grow(this.value / (this.duration / 25))\n    }\n  }\n})\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAA0D,aAAAC,gBAAA,CAAlDC,IAAA,CAAAC,MAAM,IAAAF,gBAAA,CAAMC,IAAA,CAAAE,iBAAiB,IAAAH,gBAAA,CAAMC,IAAA,CAAAG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}