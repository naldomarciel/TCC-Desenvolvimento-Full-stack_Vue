{"ast":null,"code":"import { assert, isArray, normalizeFileName } from './utils.js';\nimport { downloadFile } from './processors.js';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData, _createFieldsMapper } from './converters.js';\nimport { exportTypes } from './types.js';\nfunction exportFromJSON(_a) {\n  var data = _a.data,\n    _b = _a.fileName,\n    fileName = _b === void 0 ? 'download' : _b,\n    extension = _a.extension,\n    _c = _a.fileNameFormatter,\n    fileNameFormatter = _c === void 0 ? function (name) {\n      return name.replace(/\\s+/, '_');\n    } : _c,\n    fields = _a.fields,\n    _d = _a.exportType,\n    exportType = _d === void 0 ? 'txt' : _d,\n    _e = _a.replacer,\n    replacer = _e === void 0 ? null : _e,\n    _f = _a.space,\n    space = _f === void 0 ? 4 : _f,\n    _g = _a.processor,\n    processor = _g === void 0 ? downloadFile : _g,\n    _h = _a.withBOM,\n    withBOM = _h === void 0 ? false : _h,\n    _j = _a.beforeTableEncode,\n    beforeTableEncode = _j === void 0 ? function (i) {\n      return i;\n    } : _j,\n    _k = _a.delimiter,\n    delimiter = _k === void 0 ? ',' : _k;\n  var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of objects';\n  var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \".concat(exportType, \".\");\n  var MESSAGE_FIELD_INVALID = \"Can't export string data to \".concat(exportType, \".\");\n  if (typeof data === 'string') {\n    switch (exportType) {\n      case 'txt':\n      case 'css':\n      case 'html':\n        {\n          return processor(data, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n        }\n      default:\n        throw new Error(MESSAGE_FIELD_INVALID);\n    }\n  }\n  var fieldsMapper = _createFieldsMapper(fields);\n  var safeData = fieldsMapper(_prepareData(data));\n  var JSONData = _createJSONData(safeData, replacer, space);\n  switch (exportType) {\n    case 'txt':\n    case 'css':\n    case 'html':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n      }\n    case 'json':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'json', fileNameFormatter));\n      }\n    case 'csv':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var BOM = '\\ufeff';\n        var CSVData = createCSVData(safeData, {\n          beforeTableEncode: beforeTableEncode,\n          delimiter: delimiter\n        });\n        var content = withBOM ? BOM + CSVData : CSVData;\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'csv', fileNameFormatter));\n      }\n    case 'xls':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var content = createXLSData(safeData, {\n          beforeTableEncode: beforeTableEncode\n        });\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xls', fileNameFormatter));\n      }\n    case 'xml':\n      {\n        var content = createXMLData(safeData);\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xml', fileNameFormatter));\n      }\n    default:\n      throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n  }\n}\nexportFromJSON.types = exportTypes;\nexportFromJSON.processors = {\n  downloadFile: downloadFile\n};\nexport default exportFromJSON;","map":{"version":3,"names":["assert","isArray","normalizeFileName","downloadFile","_prepareData","_createJSONData","createCSVData","createXLSData","createXMLData","_createFieldsMapper","exportTypes","exportFromJSON","_a","data","_b","fileName","extension","_c","fileNameFormatter","name","replace","fields","_d","exportType","_e","replacer","_f","space","_g","processor","_h","withBOM","_j","beforeTableEncode","i","_k","delimiter","MESSAGE_IS_ARRAY_FAIL","MESSAGE_UNKNOWN_EXPORT_TYPE","concat","MESSAGE_FIELD_INVALID","Error","fieldsMapper","safeData","JSONData","BOM","CSVData","content","types","processors"],"sources":["C:/Users/naldo/OneDrive/Documents/GitHub/appbarber/barbervue/node_modules/export-from-json/dist/esm/exportFromJSON.js"],"sourcesContent":["import { assert, isArray, normalizeFileName } from './utils.js';\nimport { downloadFile } from './processors.js';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData, _createFieldsMapper } from './converters.js';\nimport { exportTypes } from './types.js';\nfunction exportFromJSON(_a) {\n    var data = _a.data, _b = _a.fileName, fileName = _b === void 0 ? 'download' : _b, extension = _a.extension, _c = _a.fileNameFormatter, fileNameFormatter = _c === void 0 ? function (name) { return name.replace(/\\s+/, '_'); } : _c, fields = _a.fields, _d = _a.exportType, exportType = _d === void 0 ? 'txt' : _d, _e = _a.replacer, replacer = _e === void 0 ? null : _e, _f = _a.space, space = _f === void 0 ? 4 : _f, _g = _a.processor, processor = _g === void 0 ? downloadFile : _g, _h = _a.withBOM, withBOM = _h === void 0 ? false : _h, _j = _a.beforeTableEncode, beforeTableEncode = _j === void 0 ? function (i) { return i; } : _j, _k = _a.delimiter, delimiter = _k === void 0 ? ',' : _k;\n    var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of objects';\n    var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \".concat(exportType, \".\");\n    var MESSAGE_FIELD_INVALID = \"Can't export string data to \".concat(exportType, \".\");\n    if (typeof data === 'string') {\n        switch (exportType) {\n            case 'txt':\n            case 'css':\n            case 'html': {\n                return processor(data, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n            }\n            default:\n                throw new Error(MESSAGE_FIELD_INVALID);\n        }\n    }\n    var fieldsMapper = _createFieldsMapper(fields);\n    var safeData = fieldsMapper(_prepareData(data));\n    var JSONData = _createJSONData(safeData, replacer, space);\n    switch (exportType) {\n        case 'txt':\n        case 'css':\n        case 'html': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n        }\n        case 'json': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'json', fileNameFormatter));\n        }\n        case 'csv': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var BOM = '\\ufeff';\n            var CSVData = createCSVData(safeData, { beforeTableEncode: beforeTableEncode, delimiter: delimiter });\n            var content = withBOM ? BOM + CSVData : CSVData;\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'csv', fileNameFormatter));\n        }\n        case 'xls': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var content = createXLSData(safeData, { beforeTableEncode: beforeTableEncode });\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xls', fileNameFormatter));\n        }\n        case 'xml': {\n            var content = createXMLData(safeData);\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xml', fileNameFormatter));\n        }\n        default:\n            throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n    }\n}\nexportFromJSON.types = exportTypes;\nexportFromJSON.processors = { downloadFile: downloadFile };\nexport default exportFromJSON;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}